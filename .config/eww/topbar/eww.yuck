(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true"
)

(defpoll volume :interval "1s"
  "~/.config/eww/topbar/scripts/getvol"
)

(defpoll time :interval "1s"
  "date '+%R'"
)

(deflisten workspaces :initial "[]" "~/.config/eww/topbar/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "~/.config/eww/topbar/scripts/get-active-workspace")

(defwindow my_bar
  :monitor 0
  :geometry (geometry :x "0px"
    :y "5px"
    :width "90px"
  :anchor "top center")
  :exclusive true
  :namespace "eww"
  (my_bar)
)

(defwidget my_bar []
  (box :class "bar-widget" :orientation "h" :space-evenly true
    (box :orientation "h" :space-evenly false :halign "start"
      (workspaces)
    )
    
    (box :orientation "h" :space-evenly false :spacing 50 :halign "center"
      (music)
    )
    
    (box :orientation "h" :space-evenly false :halign "end"
      (sidestuff)
    )
  )
)

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly true :halign "end"
    (metric :label "ðŸ”Š"
      :value volume
    :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ï¡š"
      :value {EWW_RAM.used_mem_perc}
    :onchange "")
    (metric :label "ðŸ’¾"
      :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
    :onchange "")
  time)
)

(defwidget workspaces []
  (eventbox :onscroll "~/.config/eww/topbar/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}")
          )
        )
      )
    )
  )
)


(defwidget music []
  (box :class "music"
    :orientation "h"
    :halign "center"
  {music != "" ? "ðŸŽµ${music}" : ""}))



(defwidget metric [label value onchange]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value value
    :onchange onchange)
  )
)

